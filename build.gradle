/*
 * Copyright (c) 2024, WSO2 LLC. (https://www.wso2.com).
 *
 * WSO2 LLC. licenses this file to you under the Apache License,
 * Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
plugins {
    id 'java-library'
    id 'checkstyle'
    id "com.github.spotbugs"
    id "de.undercouch.download"
}

group = "${group}"
version = "${version}"

repositories {
    mavenCentral()

    maven {
        url = uri('https://repo.maven.apache.org/maven2/')
    }

    maven {
        url = 'https://maven.pkg.github.com/ballerina-platform/*'
        credentials {
            username System.getenv("packageUser")
            password System.getenv("packagePAT")
        }
    }

    // TODO: Remove once scan tool is published to central
    maven {
        url = 'https://maven.pkg.github.com/Xenowa/static-code-analysis-tool'
        credentials {
            username System.getenv("packageUser")
            password System.getenv("packagePAT")
        }
    }
}

dependencies {
    implementation "com.google.code.gson:gson:${gsonVersion}"
    implementation group: 'org.ballerinalang', name: 'ballerina-lang', version: "${ballerinaLangVersion}"
    implementation group: 'org.ballerinalang', name: 'ballerina-parser', version: "${ballerinaLangVersion}"
    implementation group: 'org.ballerinalang', name: 'ballerina-runtime', version: "${ballerinaLangVersion}"
    implementation group: 'org.ballerinalang', name: 'ballerina-tools-api', version: "${ballerinaLangVersion}"
    implementation group: 'org.ballerinalang', name: 'jballerina-tools', version: "${ballerinaLangVersion}"
    implementation group: 'org.ballerinalang', name: 'ballerina-cli', version: "${ballerinaLangVersion}"
    implementation group: 'org.ballerinalang', name: 'toml-parser', version: "${ballerinaLangVersion}"

    checkstyle group: 'com.puppycrawl.tools', name: 'checkstyle', version: "${puppycrawlCheckstyleVersion}"

    // Adding dependency to the scan-command module to use interfaces
    implementation group: 'io.ballerina.scan', name: 'scan-command', version: "${scanToolVersion}"
}

tasks.withType(JavaExec).configureEach {
    systemProperty 'ballerina.home', System.getenv("BALLERINA_HOME")
}

// Setting up checkstyles
tasks.register('downloadCheckstyleRuleFiles', Download) {
    src([
            'https://raw.githubusercontent.com/wso2/code-quality-tools/v1.4/checkstyle/jdk-17/checkstyle.xml',
            'https://raw.githubusercontent.com/wso2/code-quality-tools/v1.4/checkstyle/jdk-17/suppressions.xml'
    ])
    overwrite false
    onlyIfNewer true
    dest buildDir
}

artifacts.add('default', file("${project.buildDir}/checkstyle.xml")) {
    builtBy(downloadCheckstyleRuleFiles)
}

artifacts.add('default', file("${project.buildDir}/suppressions.xml")) {
    builtBy(downloadCheckstyleRuleFiles)
}

def excludePattern = '**/module-info.java'
tasks.withType(Checkstyle) {
    exclude excludePattern
}

checkstyle {
    toolVersion "${project.puppycrawlCheckstyleVersion}"
    configFile rootProject.file("${project.buildDir}/checkstyle.xml")
    configProperties = ["suppressionFile": file("${project.buildDir}/suppressions.xml")]
}

checkstyleMain.dependsOn(downloadCheckstyleRuleFiles)
checkstyleTest.dependsOn(downloadCheckstyleRuleFiles)

// Setting up spotbugs
spotbugsMain {
    effort "max"
    reportLevel "low"

    reportsDir = file("$project.buildDir/reports/spotbugs")

    reports {
        html.enabled true
        text.enabled = true
    }

    def excludeFile = file("${projectDir}/spotbugs-exclude.xml")
    if (excludeFile.exists()) {
        excludeFilter = excludeFile
    }
}

spotbugsTest {
    effort = "max"
    reportLevel = "low"

    reportsDir = file("$project.buildDir/reports/spotbugs")

    reports {
        html.enabled true
        text.enabled = true
    }

    def excludeFile = file("${projectDir}/spotbugs-exclude.xml")
    if (excludeFile.exists()) {
        excludeFilter = excludeFile
    }
}

tasks.register('validateSpotbugs') {
    doLast {
        if (spotbugsMain.reports.size() > 0 && spotbugsMain.reports[0].destination.exists() &&
                spotbugsMain.reports[0].destination.text.readLines().size() > 0) {
            spotbugsMain.reports[0].destination?.eachLine {
                println 'Failure: ' + it
            }
        } else {
            throw new GradleException("Spotbugs rule violations were found.");
        }
    }
}

spotbugsMain.finalizedBy validateSpotbugs

// Configurations to automatically build and update versions of the compiler plugin
def tomlVersion = "${version}"
def ballerinaTomlFilePlaceHolder = new File("${rootDir}/build-config/resources/Ballerina.toml")
def compilerPluginTomlFilePlaceHolder = new File("${rootDir}/build-config/resources/CompilerPlugin.toml")
def ballerinaTomlFile = new File("${projectDir}/customanalyzer/Ballerina.toml")
def compilerPluginTomlFile = new File("${projectDir}/customanalyzer/CompilerPlugin.toml")

tasks.register('updateTomlFiles') {
    // Update the Ballerina.toml and CompilerPlugin.toml files
    doLast {
        def newConfig = ballerinaTomlFilePlaceHolder.text.replace("@toml.distribution@", ballerinaLangVersion)
        newConfig = newConfig.replace("@toml.version@", tomlVersion)
        ballerinaTomlFile.text = newConfig

        def newToolConfig = compilerPluginTomlFilePlaceHolder.text.replace("@toml.version@", tomlVersion)
        compilerPluginTomlFile.text = newToolConfig
    }
}

build {
    dependsOn updateTomlFiles
}
